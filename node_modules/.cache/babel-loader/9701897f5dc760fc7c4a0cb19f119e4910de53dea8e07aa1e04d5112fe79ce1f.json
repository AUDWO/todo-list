{"ast":null,"code":"var _jsxFileName = \"/Users/myeongjae/Desktop/movie-react/src/components/App.js\",\n  _s = $RefreshSig$();\nimport ReviewList from \"./ReviewList\";\nimport { getReviews } from \"../api\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LIMIT = 6;\nfunction App() {\n  _s();\n  //영화 list들을 담고있는 items State\n  const [items, setItems] = useState([]);\n\n  //createdAt으로 기준을 정할건지 rating으로 정할건지 결정하는 order State\n  const [order, setOrder] = useState(\"createdAt\");\n\n  //offset 페이징기법 개수를 담는 offset State\n  const [offset, setOffset] = useState(0);\n\n  //영화 list들이 모두 나왔을떄 더보기 버튼을 없애기 위해 paging.hasNext를 담고 있는 hasNext State\n  const [hasNext, setHasNext] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const sortedItems = items.sort((a, b) => b[order] - a[order]);\n  const handleNewestClick = () => setOrder(\"createdAt\");\n  const handleBestClick = () => setOrder(\"rating\");\n\n  //자식 컴포넌트에서 id값을 item.id값으로 전달해줌\n  const handleDelete = id => {\n    const nextItems = items.filter(item => item.id !== id);\n    setItems(nextItems);\n  };\n\n  //영화 리스트들을 불러오는 메소드\n  const handleLoad = async options => {\n    let result;\n    try {\n      setIsLoading(true);\n      result = await getReviews(options);\n    } catch (error) {\n      console.error(\"fuck you\");\n      return;\n    } finally {\n      setIsLoading(false);\n    }\n    const {\n      reviews,\n      paging\n    } = await getReviews(options);\n    //맨 처음에는 offset이 0일 것이다.\n    if (options.offset === 0) {\n      setItems(reviews);\n    } else {\n      //offset이 변경되면 새로운 영화 list들만 reviews에 담긴다.\n      //이후 offset이 변경되면 영화 list들을 담은 items도 업데이트를 해줘야 한다.\n      //...items가 기존에 영화 list들\n      //...reviews가 새로 받아온 영화 list들\n      setItems([...items, ...reviews]);\n      //setItems((currentItems) => [...currentItems, ...reviews]);\n    }\n    //offset값과 hasNext값만 미리 바꿔서 나중에 함수를 실행하면 그때 적용하게 함\n    setOffset(options.offset + reviews.length);\n    //true값인지 false값인지 따진다.\n    setHasNext(paging.hasNext);\n    //state값이 변경되더라도 해당 state값이 렌더링에 영향을 미치는 값이 아니라면\n    //따로 렌더링 하지 않는다\n    //offset값과 ha\n  };\n\n  //영화리스트들을 불러오기 위해 사용하는 메소드\n  //이전에 변경된 offset값을 파라미터로 넘겨 다시 handleLoad를 실행해 ->\n  //새로운 영화 list들을 보여준다.\n  const handleLoadMore = () => {\n    //order: createdAt ||\n    handleLoad({\n      order,\n      offset,\n      limit: LIMIT\n    });\n  };\n  useEffect(() => {\n    //처음 handleLoad가 실행될 때를 나타냄\n    //이후 handleLoadMore버튼을 통해서 다른 영화 list들을 보여줌\n\n    //order값이 바뀌면 다시 useEffect가 작동함\n    handleLoad({\n      order,\n      offset: 0,\n      limit: LIMIT\n    });\n  }, [order]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNewestClick,\n        children: \"\\uCD5C\\uC2E0\\uC21C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleBestClick,\n        children: \"\\uBCA0\\uC2A4\\uD2B8\\uC21C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReviewList, {\n      items: sortedItems,\n      onDelete: handleDelete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), hasNext && /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: isLoading,\n      onClick: handleLoadMore,\n      children: \"\\uB354 \\uBCF4\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"icDj/QFM5Ktq87X2U9hgn66tyLI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["ReviewList","getReviews","useCallback","useEffect","useState","jsxDEV","_jsxDEV","LIMIT","App","_s","items","setItems","order","setOrder","offset","setOffset","hasNext","setHasNext","isLoading","setIsLoading","sortedItems","sort","a","b","handleNewestClick","handleBestClick","handleDelete","id","nextItems","filter","item","handleLoad","options","result","error","console","reviews","paging","length","handleLoadMore","limit","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onDelete","disabled","_c","$RefreshReg$"],"sources":["/Users/myeongjae/Desktop/movie-react/src/components/App.js"],"sourcesContent":["import ReviewList from \"./ReviewList\";\nimport { getReviews } from \"../api\";\nimport { useCallback, useEffect, useState } from \"react\";\n\nconst LIMIT = 6;\n\nfunction App() {\n  //영화 list들을 담고있는 items State\n  const [items, setItems] = useState([]);\n\n  //createdAt으로 기준을 정할건지 rating으로 정할건지 결정하는 order State\n  const [order, setOrder] = useState(\"createdAt\");\n\n  //offset 페이징기법 개수를 담는 offset State\n  const [offset, setOffset] = useState(0);\n\n  //영화 list들이 모두 나왔을떄 더보기 버튼을 없애기 위해 paging.hasNext를 담고 있는 hasNext State\n  const [hasNext, setHasNext] = useState(false);\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const sortedItems = items.sort((a, b) => b[order] - a[order]);\n\n  const handleNewestClick = () => setOrder(\"createdAt\");\n  const handleBestClick = () => setOrder(\"rating\");\n\n  //자식 컴포넌트에서 id값을 item.id값으로 전달해줌\n  const handleDelete = (id) => {\n    const nextItems = items.filter((item) => item.id !== id);\n    setItems(nextItems);\n  };\n\n  //영화 리스트들을 불러오는 메소드\n  const handleLoad = async (options) => {\n    let result;\n    try {\n      setIsLoading(true);\n      result = await getReviews(options);\n    } catch (error) {\n      console.error(\"fuck you\");\n      return;\n    } finally {\n      setIsLoading(false);\n    }\n\n    const { reviews, paging } = await getReviews(options);\n    //맨 처음에는 offset이 0일 것이다.\n    if (options.offset === 0) {\n      setItems(reviews);\n    } else {\n      //offset이 변경되면 새로운 영화 list들만 reviews에 담긴다.\n      //이후 offset이 변경되면 영화 list들을 담은 items도 업데이트를 해줘야 한다.\n      //...items가 기존에 영화 list들\n      //...reviews가 새로 받아온 영화 list들\n      setItems([...items, ...reviews]);\n      //setItems((currentItems) => [...currentItems, ...reviews]);\n    }\n    //offset값과 hasNext값만 미리 바꿔서 나중에 함수를 실행하면 그때 적용하게 함\n    setOffset(options.offset + reviews.length);\n    //true값인지 false값인지 따진다.\n    setHasNext(paging.hasNext);\n    //state값이 변경되더라도 해당 state값이 렌더링에 영향을 미치는 값이 아니라면\n    //따로 렌더링 하지 않는다\n    //offset값과 ha\n  };\n\n  //영화리스트들을 불러오기 위해 사용하는 메소드\n  //이전에 변경된 offset값을 파라미터로 넘겨 다시 handleLoad를 실행해 ->\n  //새로운 영화 list들을 보여준다.\n  const handleLoadMore = () => {\n    //order: createdAt ||\n    handleLoad({ order, offset, limit: LIMIT });\n  };\n\n  useEffect(() => {\n    //처음 handleLoad가 실행될 때를 나타냄\n    //이후 handleLoadMore버튼을 통해서 다른 영화 list들을 보여줌\n\n    //order값이 바뀌면 다시 useEffect가 작동함\n    handleLoad({ order, offset: 0, limit: LIMIT });\n  }, [order]);\n\n  return (\n    <div>\n      <div>\n        <button onClick={handleNewestClick}>최신순</button>\n        <button onClick={handleBestClick}>베스트순</button>\n      </div>\n      <ReviewList items={sortedItems} onDelete={handleDelete} />\n      {hasNext && (\n        <button disabled={isLoading} onClick={handleLoadMore}>\n          더 보기\n        </button>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}